name: Release

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=$(grep '^version' Cargo.toml | head -n1 | cut -d'"' -f2)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: azst v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          body: |
            ## azst v${{ steps.get_version.outputs.version }}

            Azure Storage CLI Tool

            ### Installation

            ```bash
            curl -sSL https://raw.githubusercontent.com/${{ github.repository }}/main/install.sh | bash
            ```

            Or download the binary for your platform below.

  build:
    name: Build ${{ matrix.target }}
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: azst-linux-x86_64

          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: azst-linux-x86_64-musl

          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: azst-linux-aarch64

          - target: x86_64-apple-darwin
            os: macos-latest
            name: azst-macos-x86_64

          - target: aarch64-apple-darwin
            os: macos-latest
            name: azst-macos-aarch64

          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: azst-windows-x86_64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install cross (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Build (Linux with cross)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cross build --release --target ${{ matrix.target }}

      - name: Build (macOS/Windows)
        if: matrix.os != 'ubuntu-latest'
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          strip target/${{ matrix.target }}/release/azst || true

      - name: Create archive (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../${{ matrix.name }}.tar.gz azst
          cd -

      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a ../../../${{ matrix.name }}.zip azst.exe
          cd -

      - name: Upload Release Asset (Unix)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.name }}.tar.gz
          asset_name: ${{ matrix.name }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Asset (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.name }}.zip
          asset_name: ${{ matrix.name }}.zip
          asset_content_type: application/zip
